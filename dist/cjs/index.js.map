{"version":3,"file":"index.js","sources":["../../src/types/index.ts","../../src/core/Logger.ts","../../src/core/functional.ts"],"sourcesContent":["/**\n * Log level enumeration\n */\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n}\n\n/**\n * Log message format options\n */\nexport interface LogFormatOptions {\n  /**\n   * Include timestamp in log messages\n   */\n  timestamp?: boolean;\n  \n  /**\n   * Include log level in log messages\n   */\n  level?: boolean;\n  \n  /**\n   * Custom prefix for log messages\n   */\n  prefix?: string;\n  \n  /**\n   * Custom colors for different log levels\n   */\n  colors?: boolean;\n}\n\n/**\n * Logger configuration options\n */\nexport interface LoggerOptions {\n  /**\n   * Minimum log level to display\n   */\n  minLevel?: LogLevel;\n  \n  /**\n   * Formatting options for log messages\n   */\n  format?: LogFormatOptions;\n  \n  /**\n   * Whether to enable logging\n   */\n  enabled?: boolean;\n}\n\n/**\n * Logger interface defining the core logging methods\n */\nexport interface ILogger {\n  /**\n   * Log a debug message\n   * @param message - The message to log\n   * @param args - Additional arguments to log\n   */\n  debug(message: unknown, ...args: unknown[]): void;\n  \n  /**\n   * Log an info message\n   * @param message - The message to log\n   * @param args - Additional arguments to log\n   */\n  info(message: unknown, ...args: unknown[]): void;\n  \n  /**\n   * Log a warning message\n   * @param message - The message to log\n   * @param args - Additional arguments to log\n   */\n  warn(message: unknown, ...args: unknown[]): void;\n  \n  /**\n   * Log an error message\n   * @param message - The message to log\n   * @param args - Additional arguments to log\n   */\n  error(message: unknown, ...args: unknown[]): void;\n  \n  /**\n   * Set the minimum log level\n   * @param level - The minimum log level\n   */\n  setLevel(level: LogLevel): void;\n  \n  /**\n   * Enable or disable logging\n   * @param enabled - Whether logging is enabled\n   */\n  setEnabled(enabled: boolean): void;\n  \n  /**\n   * Update logger options\n   * @param options - New logger options\n   */\n  configure(options: Partial<LoggerOptions>): void;\n}\n","import { ILogger, LogFormatOptions, LoggerOptions, LogLevel } from '../types';\n\n/**\n * Default logger options\n */\nconst DEFAULT_OPTIONS: LoggerOptions = {\n  minLevel: LogLevel.INFO,\n  format: {\n    timestamp: true,\n    level: true,\n    colors: true,\n  },\n  enabled: true,\n};\n\n/**\n * ANSI color codes for different log levels\n */\nconst COLORS = {\n  [LogLevel.DEBUG]: '\\x1b[36m', // Cyan\n  [LogLevel.INFO]: '\\x1b[32m',  // Green\n  [LogLevel.WARN]: '\\x1b[33m',  // Yellow\n  [LogLevel.ERROR]: '\\x1b[31m', // Red\n  reset: '\\x1b[0m',\n};\n\n/**\n * Core Logger implementation\n */\nexport class Logger implements ILogger {\n  private options: LoggerOptions;\n\n  /**\n   * Create a new Logger instance\n   * @param options - Logger configuration options\n   */\n  constructor(options: Partial<LoggerOptions> = {}) {\n    this.options = {\n      ...DEFAULT_OPTIONS,\n      ...options,\n      format: {\n        ...DEFAULT_OPTIONS.format,\n        ...options.format,\n      },\n    };\n  }\n\n  /**\n   * Format a log message according to the current options\n   * @param level - Log level\n   * @param message - The message to log\n   * @param args - Additional arguments to log\n   * @returns Formatted message parts\n   */\n  private formatMessage(level: LogLevel, message: unknown, ...args: unknown[]): unknown[] {\n    const parts: unknown[] = [];\n    const { format } = this.options;\n\n    // Add timestamp if enabled\n    if (format?.timestamp) {\n      const timestamp = new Date().toISOString();\n      parts.push(`[${timestamp}]`);\n    }\n\n    // Add log level if enabled\n    if (format?.level) {\n      const levelStr = `[${level.toUpperCase()}]`;\n      \n      // Apply colors if enabled\n      if (format?.colors) {\n        parts.push(`${COLORS[level]}${levelStr}${COLORS.reset}`);\n      } else {\n        parts.push(levelStr);\n      }\n    }\n\n    // Add prefix if specified\n    if (format?.prefix) {\n      parts.push(`[${format.prefix}]`);\n    }\n\n    // Add the main message\n    parts.push(message);\n\n    // Return formatted parts and additional args\n    return [...parts, ...args];\n  }\n\n  /**\n   * Check if a log level should be displayed based on the minimum level\n   * @param level - Log level to check\n   * @returns Whether the log level should be displayed\n   */\n  private shouldLog(level: LogLevel): boolean {\n    if (!this.options.enabled) {\n      return false;\n    }\n\n    const levels = Object.values(LogLevel);\n    const minLevelIndex = levels.indexOf(this.options.minLevel || LogLevel.INFO);\n    const currentLevelIndex = levels.indexOf(level);\n\n    return currentLevelIndex >= minLevelIndex;\n  }\n\n  /**\n   * Log a debug message\n   * @param message - The message to log\n   * @param args - Additional arguments to log\n   */\n  public debug(message: unknown, ...args: unknown[]): void {\n    if (this.shouldLog(LogLevel.DEBUG)) {\n      console.debug(...this.formatMessage(LogLevel.DEBUG, message, ...args));\n    }\n  }\n\n  /**\n   * Log an info message\n   * @param message - The message to log\n   * @param args - Additional arguments to log\n   */\n  public info(message: unknown, ...args: unknown[]): void {\n    if (this.shouldLog(LogLevel.INFO)) {\n      console.info(...this.formatMessage(LogLevel.INFO, message, ...args));\n    }\n  }\n\n  /**\n   * Log a warning message\n   * @param message - The message to log\n   * @param args - Additional arguments to log\n   */\n  public warn(message: unknown, ...args: unknown[]): void {\n    if (this.shouldLog(LogLevel.WARN)) {\n      console.warn(...this.formatMessage(LogLevel.WARN, message, ...args));\n    }\n  }\n\n  /**\n   * Log an error message\n   * @param message - The message to log\n   * @param args - Additional arguments to log\n   */\n  public error(message: unknown, ...args: unknown[]): void {\n    if (this.shouldLog(LogLevel.ERROR)) {\n      console.error(...this.formatMessage(LogLevel.ERROR, message, ...args));\n    }\n  }\n\n  /**\n   * Set the minimum log level\n   * @param level - The minimum log level\n   */\n  public setLevel(level: LogLevel): void {\n    this.options.minLevel = level;\n  }\n\n  /**\n   * Enable or disable logging\n   * @param enabled - Whether logging is enabled\n   */\n  public setEnabled(enabled: boolean): void {\n    this.options.enabled = enabled;\n  }\n\n  /**\n   * Update logger options\n   * @param options - New logger options\n   */\n  public configure(options: Partial<LoggerOptions>): void {\n    this.options = {\n      ...this.options,\n      ...options,\n      format: {\n        ...this.options.format,\n        ...options.format,\n      },\n    };\n  }\n}\n","import { Logger } from './Logger';\nimport { LoggerOptions, LogLevel } from '../types';\n\n/**\n * Singleton logger instance for functional API\n */\nlet defaultLogger = new Logger();\n\n/**\n * Create a new logger instance\n * @param options - Logger configuration options\n * @returns A new Logger instance\n */\nexport function createLogger(options: Partial<LoggerOptions> = {}): Logger {\n  return new Logger(options);\n}\n\n/**\n * Configure the default logger\n * @param options - Logger configuration options\n */\nexport function configure(options: Partial<LoggerOptions>): void {\n  defaultLogger.configure(options);\n}\n\n/**\n * Set the minimum log level for the default logger\n * @param level - The minimum log level\n */\nexport function setLevel(level: LogLevel): void {\n  defaultLogger.setLevel(level);\n}\n\n/**\n * Enable or disable the default logger\n * @param enabled - Whether logging is enabled\n */\nexport function setEnabled(enabled: boolean): void {\n  defaultLogger.setEnabled(enabled);\n}\n\n/**\n * Log a debug message using the default logger\n * @param message - The message to log\n * @param args - Additional arguments to log\n */\nexport function debug(message: unknown, ...args: unknown[]): void {\n  defaultLogger.debug(message, ...args);\n}\n\n/**\n * Log an info message using the default logger\n * @param message - The message to log\n * @param args - Additional arguments to log\n */\nexport function info(message: unknown, ...args: unknown[]): void {\n  defaultLogger.info(message, ...args);\n}\n\n/**\n * Log a warning message using the default logger\n * @param message - The message to log\n * @param args - Additional arguments to log\n */\nexport function warn(message: unknown, ...args: unknown[]): void {\n  defaultLogger.warn(message, ...args);\n}\n\n/**\n * Log an error message using the default logger\n * @param message - The message to log\n * @param args - Additional arguments to log\n */\nexport function error(message: unknown, ...args: unknown[]): void {\n  defaultLogger.error(message, ...args);\n}\n\n/**\n * Reset the default logger to its initial state\n */\nexport function resetDefaultLogger(): void {\n  defaultLogger = new Logger();\n}\n"],"names":["LogLevel"],"mappings":";;;;AAAA;;AAEG;AACSA,0BAKX;AALD,CAAA,UAAY,QAAQ,EAAA;AAClB,IAAA,QAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,QAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,QAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,QAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACjB,CAAC,EALWA,gBAAQ,KAARA,gBAAQ,GAKnB,EAAA,CAAA,CAAA;;ACND;;AAEG;AACH,MAAM,eAAe,GAAkB;IACrC,QAAQ,EAAEA,gBAAQ,CAAC,IAAI;AACvB,IAAA,MAAM,EAAE;AACN,QAAA,SAAS,EAAE,IAAI;AACf,QAAA,KAAK,EAAE,IAAI;AACX,QAAA,MAAM,EAAE,IAAI;AACb,KAAA;AACD,IAAA,OAAO,EAAE,IAAI;CACd,CAAC;AAEF;;AAEG;AACH,MAAM,MAAM,GAAG;AACb,IAAA,CAACA,gBAAQ,CAAC,KAAK,GAAG,UAAU;AAC5B,IAAA,CAACA,gBAAQ,CAAC,IAAI,GAAG,UAAU;AAC3B,IAAA,CAACA,gBAAQ,CAAC,IAAI,GAAG,UAAU;AAC3B,IAAA,CAACA,gBAAQ,CAAC,KAAK,GAAG,UAAU;AAC5B,IAAA,KAAK,EAAE,SAAS;CACjB,CAAC;AAEF;;AAEG;MACU,MAAM,CAAA;AAGjB;;;AAGG;AACH,IAAA,WAAA,CAAY,UAAkC,EAAE,EAAA;QAC9C,IAAI,CAAC,OAAO,GAAG;AACb,YAAA,GAAG,eAAe;AAClB,YAAA,GAAG,OAAO;AACV,YAAA,MAAM,EAAE;gBACN,GAAG,eAAe,CAAC,MAAM;gBACzB,GAAG,OAAO,CAAC,MAAM;AAClB,aAAA;SACF,CAAC;KACH;AAED;;;;;;AAMG;AACK,IAAA,aAAa,CAAC,KAAe,EAAE,OAAgB,EAAE,GAAG,IAAe,EAAA;QACzE,MAAM,KAAK,GAAc,EAAE,CAAC;AAC5B,QAAA,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;;AAGhC,QAAA,IAAI,MAAM,KAAN,IAAA,IAAA,MAAM,uBAAN,MAAM,CAAE,SAAS,EAAE;YACrB,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;AAC3C,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,SAAS,CAAA,CAAA,CAAG,CAAC,CAAC;AAC9B,SAAA;;AAGD,QAAA,IAAI,MAAM,KAAN,IAAA,IAAA,MAAM,uBAAN,MAAM,CAAE,KAAK,EAAE;YACjB,MAAM,QAAQ,GAAG,CAAI,CAAA,EAAA,KAAK,CAAC,WAAW,EAAE,GAAG,CAAC;;AAG5C,YAAA,IAAI,MAAM,KAAN,IAAA,IAAA,MAAM,uBAAN,MAAM,CAAE,MAAM,EAAE;AAClB,gBAAA,KAAK,CAAC,IAAI,CAAC,CAAG,EAAA,MAAM,CAAC,KAAK,CAAC,CAAG,EAAA,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAA,CAAE,CAAC,CAAC;AAC1D,aAAA;AAAM,iBAAA;AACL,gBAAA,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACtB,aAAA;AACF,SAAA;;AAGD,QAAA,IAAI,MAAM,KAAN,IAAA,IAAA,MAAM,uBAAN,MAAM,CAAE,MAAM,EAAE;YAClB,KAAK,CAAC,IAAI,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,MAAM,CAAG,CAAA,CAAA,CAAC,CAAC;AAClC,SAAA;;AAGD,QAAA,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;;AAGpB,QAAA,OAAO,CAAC,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;KAC5B;AAED;;;;AAIG;AACK,IAAA,SAAS,CAAC,KAAe,EAAA;AAC/B,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;AACzB,YAAA,OAAO,KAAK,CAAC;AACd,SAAA;QAED,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAACA,gBAAQ,CAAC,CAAC;AACvC,QAAA,MAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAIA,gBAAQ,CAAC,IAAI,CAAC,CAAC;QAC7E,MAAM,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEhD,OAAO,iBAAiB,IAAI,aAAa,CAAC;KAC3C;AAED;;;;AAIG;AACI,IAAA,KAAK,CAAC,OAAgB,EAAE,GAAG,IAAe,EAAA;QAC/C,IAAI,IAAI,CAAC,SAAS,CAACA,gBAAQ,CAAC,KAAK,CAAC,EAAE;AAClC,YAAA,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,aAAa,CAACA,gBAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;AACxE,SAAA;KACF;AAED;;;;AAIG;AACI,IAAA,IAAI,CAAC,OAAgB,EAAE,GAAG,IAAe,EAAA;QAC9C,IAAI,IAAI,CAAC,SAAS,CAACA,gBAAQ,CAAC,IAAI,CAAC,EAAE;AACjC,YAAA,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAACA,gBAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;AACtE,SAAA;KACF;AAED;;;;AAIG;AACI,IAAA,IAAI,CAAC,OAAgB,EAAE,GAAG,IAAe,EAAA;QAC9C,IAAI,IAAI,CAAC,SAAS,CAACA,gBAAQ,CAAC,IAAI,CAAC,EAAE;AACjC,YAAA,OAAO,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAACA,gBAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;AACtE,SAAA;KACF;AAED;;;;AAIG;AACI,IAAA,KAAK,CAAC,OAAgB,EAAE,GAAG,IAAe,EAAA;QAC/C,IAAI,IAAI,CAAC,SAAS,CAACA,gBAAQ,CAAC,KAAK,CAAC,EAAE;AAClC,YAAA,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,aAAa,CAACA,gBAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;AACxE,SAAA;KACF;AAED;;;AAGG;AACI,IAAA,QAAQ,CAAC,KAAe,EAAA;AAC7B,QAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;KAC/B;AAED;;;AAGG;AACI,IAAA,UAAU,CAAC,OAAgB,EAAA;AAChC,QAAA,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;KAChC;AAED;;;AAGG;AACI,IAAA,SAAS,CAAC,OAA+B,EAAA;QAC9C,IAAI,CAAC,OAAO,GAAG;YACb,GAAG,IAAI,CAAC,OAAO;AACf,YAAA,GAAG,OAAO;AACV,YAAA,MAAM,EAAE;AACN,gBAAA,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM;gBACtB,GAAG,OAAO,CAAC,MAAM;AAClB,aAAA;SACF,CAAC;KACH;AACF;;AChLD;;AAEG;AACH,IAAI,aAAa,GAAG,IAAI,MAAM,EAAE,CAAC;AAEjC;;;;AAIG;AACa,SAAA,YAAY,CAAC,OAAA,GAAkC,EAAE,EAAA;AAC/D,IAAA,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;AAC7B,CAAC;AAED;;;AAGG;AACG,SAAU,SAAS,CAAC,OAA+B,EAAA;AACvD,IAAA,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACnC,CAAC;AAED;;;AAGG;AACG,SAAU,QAAQ,CAAC,KAAe,EAAA;AACtC,IAAA,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChC,CAAC;AAED;;;AAGG;AACG,SAAU,UAAU,CAAC,OAAgB,EAAA;AACzC,IAAA,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AACpC,CAAC;AAED;;;;AAIG;SACa,KAAK,CAAC,OAAgB,EAAE,GAAG,IAAe,EAAA;IACxD,aAAa,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;AACxC,CAAC;AAED;;;;AAIG;SACa,IAAI,CAAC,OAAgB,EAAE,GAAG,IAAe,EAAA;IACvD,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;AACvC,CAAC;AAED;;;;AAIG;SACa,IAAI,CAAC,OAAgB,EAAE,GAAG,IAAe,EAAA;IACvD,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;AACvC,CAAC;AAED;;;;AAIG;SACa,KAAK,CAAC,OAAgB,EAAE,GAAG,IAAe,EAAA;IACxD,aAAa,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;AACxC,CAAC;AAED;;AAEG;SACa,kBAAkB,GAAA;AAChC,IAAA,aAAa,GAAG,IAAI,MAAM,EAAE,CAAC;AAC/B;;;;;;;;;;;;;"}